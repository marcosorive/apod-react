{"version":3,"sources":["components/ApodMedia.js","components/Apod.js","components/DatePicker.js","App.js","serviceWorker.js","index.js"],"names":["ApodMedia","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","props","type","react_default","a","createElement","src","source","className","alt","width","height","title","frameBorder","allow","allowFullScreen","Component","Apod","_this","call","state","isLoaded","error","apod","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","getApod","date","stop","_componentDidUpdate","_callee2","prevProps","_context2","setState","_x","_getApod","_callee3","response","_context3","fetch","mode","sent","ok","json","Error","t0","message","_x2","_this$state","copyright","ApodMedia_ApodMedia","media_type","url","explanation","class","role","DatePicker","onChange","handleDateInput","onClick","handleSubmit","App","getTodayDate","bind","assertThisInitialized","inputDate","Apod_Apod","DatePicker_DatePicker","event","target","console","log","today","Date","dd","getDate","mm","getMonth","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dfecf171.chunk.js","sourcesContent":["import React, { Component } from 'react';\nexport class ApodMedia extends Component {\n\n    render(){\n        if(this.props.type ===\"image\"){\n            return(<img src={this.props.source} className=\"img-fluid\" alt=\"apod-media\"></img>)\n        }else{\n            return(\n                <iframe width=\"100%\" height=\"560\" title=\"apod video\"\n                    src={this.props.source}\n                    frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n                    allowFullScreen>\n                </iframe>\n            )\n        }\n    }\n}","import React, { Component } from 'react';\nimport {ApodMedia} from './ApodMedia';\nexport class Apod extends Component {\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisLoaded:false,\n\t\t\terror:null,\n\t\t\tapod:null\n\t\t}\n\t}\n\n\tasync componentDidMount(){\n\t\tthis.getApod(this.props.date);\n\t}\n\n\tasync componentDidUpdate(prevProps){\n\t\tif(this.props.date !== prevProps.date){\n\t\t\tthis.setState( {\n\t\t\t\tisLoaded:false,\n\t\t\t\terror:null,\n\t\t\t\tapod:null\n\t\t\t})\n\t\t\tthis.getApod(this.props.date);\n\t\t}\n\t}\n\n\tasync getApod(date){\n\t\ttry{\n\t\t\tlet response = await fetch(\"https://api.nasa.gov/planetary/apod?date=\"+date+\"&api_key=DEMO_KEY\",{mode:\"cors\"});\n\t\t\tif(await response.ok){\n\t\t\t\tresponse = await response.json()\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoaded:true,\n\t\t\t\t\tapod:response,\n\t\t\t\t})\n\t\t\t}else{\n\t\t\t\tthrow new Error();\n\t\t\t}\n\t\t}catch(e){\n\t\t\tthis.setState({\n\t\t\t\tisLoaded:true,\n\t\t\t\terror:e.message\n\t\t\t})\n\t\t}\n\t}\n\n\trender() {\n\t\tlet {isLoaded,error,apod} = this.state;\n\t\tlet copyright = \"Public domain\";\n\t\tif(!isLoaded){\n\t\t\treturn(\n\t\t\t\t<div className=\"row justify-content-center align-items-center\">\n\t\t\t\t<div class=\"spinner-border text-primary\" role=\"status\">\n\t\t\t\t\t<span class=\"sr-only\">Loading...</span>\n\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}else if(error){\n\t\t\treturn (\n\t\t\t\t<p>There's been an error, please try again later.</p>\n\t\t\t);\n\t\t}else{\n\t\t\tif(apod.copyright){\n\t\t\t\tcopyright = apod.copyright;\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<div className=\"border rounded-top shadow bg-white text-space\">\n\t\t\t\t\t<h2 className=\"card-header text-center\">{apod.title}</h2>\n\t\t\t\t\t<div className=\"row  align-items-center p-3 my-md-3\">\n\t\t\t\t\t\t<div className=\"col-sm-12 col-md-6\">\n\t\t\t\t\t\t<ApodMedia type={apod.media_type} source={apod.url} className=\"col-sm-12 col-md-6\"/>\n\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t<div className=\"col-sm-12 col-md-6 card-text my-md-3 py-3 text-justify\">\n\t\t\t\t\t\t\t<p><strong>Credit & Copyright</strong>: {copyright}</p>\n\t\t\t\t\t\t\t<p><strong>Explanation</strong>: {apod.explanation}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\n","import React, { Component } from 'react';\nexport class DatePicker extends Component {\n\n    render(){\n        return(\n            <div className=\"row justify-content-center align-items-center my-5\">\n                <div className=\"col-sm-12 col-md-6\">\n                    <div className=\"border rounded-top shadow bg-white m-3\">\n                        <h2 className=\"card-header text-center text-space\">Check another day!</h2>\n                        <div className=\"form-inline p-3\">\n                            <div className=\"mx-auto py-3\">\n                            <input type=\"date\" className=\"form-control mx-2\" onChange={this.props.handleDateInput}/>\n                            <button className=\"btn bg-space text-white\" onClick={this.props.handleSubmit}>Check</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}","import React, { Component } from 'react';\nimport {Apod} from './components/Apod';\nimport {DatePicker} from './components/DatePicker';\nexport class App extends Component {\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.getTodayDate = this.getTodayDate.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.handleDateInput = this.handleDateInput.bind(this);\n\t\tthis.state={\n\t\t\tinputDate:null,\n\t\t\tdate:this.getTodayDate()\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container-fluid\">\n\t\t\t\t<h1 className=\"text-center mt-5 text-white\">Astronomic picture of the day</h1>\n\t\t\t\t<h3 className=\"text-center mb-3 text-white\">{this.state.date}</h3>\n\t\t\t\t{/* <div className=\"row\"> */}\n\t\t\t\t\t<Apod date={this.state.date}/>\n\t\t\t\t\t<DatePicker handleSubmit={this.handleSubmit} handleDateInput={this.handleDateInput}/>\n\t\t\t\t{/* </div> */}\n\t\t\t</div>\n\t\t);\n\t}\n\n\n\thandleDateInput(event){\n\t\tthis.setState({\n\t\t\tinputDate:event.target.value\n\t\t})\n\t}\n\n\thandleSubmit(){\n\t\tconsole.log(\"Llamdo!\")\n\t\tif(this.state.inputDate === null){\n\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\tdate:this.state.inputDate\n\t\t\t})\n\t\t}\n\t\t\n\t}\n\n  \tgetTodayDate(){\n\t\tvar today = new Date();\n\t\tvar dd = today.getDate();\n\t\tvar mm = today.getMonth() + 1;\n\t\tvar yyyy = today.getFullYear();\n\n\t\tif (dd < 10) {\n\t\t\tdd = '0' + dd;\n\t\t}\n\n\t\tif (mm < 10) {\n\t\t\tmm = '0' + mm;\n\t\t}\n\n\t\treturn  yyyy+'-'+mm + '-' + dd;\n\t}\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}